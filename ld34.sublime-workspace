{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"max",
				"maxSpeedText"
			],
			[
				"spt",
				"maxSpeedText"
			],
			[
				"v",
				"p· visible	Bool"
			],
			[
				"spa",
				"p· space	Int"
			],
			[
				"he",
				"health"
			],
			[
				"ga",
				"game_is_started"
			],
			[
				"h",
				"p· height	Float"
			],
			[
				"ant",
				"ants"
			],
			[
				"de",
				"m· destroy	 "
			],
			[
				"m",
				"p· mid	luxe.Vector"
			],
			[
				"w",
				"p· width	Float"
			],
			[
				"seg",
				"segments"
			],
			[
				"P",
				"Poop"
			],
			[
				"p",
				"m· push	Int"
			],
			[
				"tex",
				"Texture"
			],
			[
				"sub",
				"m· subtractScalar	 "
			],
			[
				"a",
				"angle"
			],
			[
				"move",
				"movementTime"
			],
			[
				"ro",
				"p· rotation_z	Float"
			],
			[
				"wi",
				"gridWidthRes"
			],
			[
				"mi",
				"m· generate_mipmaps	 "
			],
			[
				"co",
				"p· collisionGroup	Int"
			],
			[
				"S",
				"Spawner"
			],
			[
				"coll",
				"p· collisionMask	Int"
			],
			[
				"iss",
				"p· isStatic	Bool"
			],
			[
				"add",
				"m· addAnt	 "
			],
			[
				"_",
				"_ant"
			],
			[
				"en",
				"entity"
			],
			[
				"_op",
				"_options"
			],
			[
				"Pl",
				"PlayerBody"
			],
			[
				"pl",
				"p· PlayerBody	PlayerBody"
			],
			[
				"of",
				"offset"
			],
			[
				"po",
				"p· pos	luxe.Vector"
			],
			[
				"_opt",
				"_options"
			],
			[
				"ca",
				"m· calculateSpringForce1D	Float"
			],
			[
				"c",
				"p· contactsArray	Array<physics.Contact>"
			],
			[
				"sc",
				"p· Screen	Screen"
			],
			[
				"bo",
				"bodyA"
			],
			[
				"sol",
				"solveVelocity"
			],
			[
				"comp",
				"p· Component	Component"
			],
			[
				"sh",
				"shape1"
			],
			[
				"sha",
				"shape2"
			],
			[
				"solv",
				"solveVelocityCCD"
			],
			[
				"ccd",
				"p· ccdTouched	Bool"
			],
			[
				"i",
				"p· isCollideDiscrete	Bool"
			],
			[
				"isc",
				"p· isCollideDiscrete	Bool"
			],
			[
				"solvep",
				"solvePosition"
			],
			[
				"nor",
				"normal"
			],
			[
				"F",
				"Float"
			],
			[
				"norm",
				"normalImpulse"
			],
			[
				"corr",
				"m· correct3_minus	 "
			],
			[
				"cont",
				"continue"
			],
			[
				"con",
				"continue"
			],
			[
				"upd",
				"m· updateShape	 "
			],
			[
				"name",
				"name_unique"
			],
			[
				"div",
				"m· divideScalar	phoenix.Vector"
			],
			[
				"di",
				"m· divideScalar	phoenix.Vector"
			],
			[
				"inv",
				"invMass"
			],
			[
				"so",
				"m· solvePosition	 "
			],
			[
				"b",
				"p· body	physics.RigidBody"
			],
			[
				"colo",
				"p· color_pink	phoenix.Color"
			],
			[
				"len",
				"p· lengthsq	Float"
			],
			[
				"set",
				"m· set_xy	 "
			],
			[
				"se",
				"m· set_xy	 "
			],
			[
				"bosp",
				"boxPos"
			],
			[
				"inver",
				"m· invert	phoenix.Vector"
			],
			[
				"sph",
				"spherePos"
			],
			[
				"Pol",
				"PolygonShape"
			],
			[
				"swe",
				"sweepCircleAABB"
			],
			[
				"tf",
				"tfirst"
			],
			[
				"mu",
				"m· multiplyScalar	 "
			],
			[
				"ret",
				"return"
			],
			[
				"le",
				"p· lengthsq	Float"
			],
			[
				"inve",
				"p· inverted	phoenix.Vector"
			],
			[
				"fa",
				"false"
			],
			[
				"colbl",
				"p· color_bluegreen	phoenix.Color"
			],
			[
				"colg",
				"p· color_green2	phoenix.Color"
			],
			[
				"inte",
				"intersect"
			],
			[
				"cor",
				"m· correct3	 "
			],
			[
				"up",
				"m· updateShape	 "
			],
			[
				"dt",
				"Dthreshold"
			],
			[
				"mass",
				"invMass"
			],
			[
				"dr",
				"draw_aabb	function"
			],
			[
				"sw",
				"sweptSpherePolygon	function"
			],
			[
				"t",
				"testSpherePolygon	function"
			],
			[
				"B",
				"Bool"
			],
			[
				"is",
				"isNaN	function"
			],
			[
				"C",
				"Contact"
			],
			[
				"shp",
				"spherePos"
			],
			[
				"Po",
				"POLYGON"
			],
			[
				"mul",
				"Multiply"
			],
			[
				"d",
				"dot	function"
			],
			[
				"cir",
				"circle1"
			],
			[
				"fin",
				"findClosestPointOnBox"
			],
			[
				"s",
				"shape1	physics.shapes.Shape"
			],
			[
				"ci",
				"circle2"
			],
			[
				"col",
				"color_green	phoenix.Color"
			],
			[
				"r",
				"relativeVelocity	luxe.Vector"
			],
			[
				"in",
				"invert	function"
			],
			[
				"ma",
				"max	luxe.Vector"
			],
			[
				"Ci",
				"CIRCLE"
			],
			[
				"shape",
				"shapeType"
			],
			[
				"cc",
				"solveCCD	function"
			],
			[
				"th",
				"thisMTD"
			],
			[
				"cogr",
				"color_green	phoenix.Color"
			],
			[
				"n",
				"normalized	phoenix.Vector"
			],
			[
				"re",
				"return"
			],
			[
				"del",
				"fixed_delta	Float"
			],
			[
				"st",
				"stop	Bool"
			],
			[
				"f",
				"staticFriction	Float"
			],
			[
				"no",
				"normalImpulse	Float"
			],
			[
				"rela",
				"relativeVelocity"
			],
			[
				"tav",
				"tangentVelocity"
			],
			[
				"tan",
				"tangentMass"
			],
			[
				"cjt",
				"cjTx"
			],
			[
				"imp",
				"impulse"
			],
			[
				"new",
				"new Vec	new Vector()"
			],
			[
				"ha",
				"hasBody	Bool"
			],
			[
				"cop",
				"color_purple	phoenix.Color"
			],
			[
				"for",
				"forp	for k,v in pairs()"
			],
			[
				"Co",
				"Component	Default"
			],
			[
				"ra",
				"random	Default"
			],
			[
				"Ord",
				"OrderedMap	Default"
			],
			[
				"loadf",
				"LoadFilesToTable	 LoadFilesToTable( path, tbl ) -luaP"
			],
			[
				"loa",
				"loadfile	Default"
			],
			[
				"ini",
				"initialise"
			],
			[
				"get",
				"getName"
			],
			[
				"e",
				"empty	function"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Main.hx",
			"settings":
			{
				"buffer_size": 8607,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/physics/SpatialHash.hx",
			"settings":
			{
				"buffer_size": 6738,
				"line_ending": "Windows"
			}
		},
		{
			"file": "project.flow",
			"settings":
			{
				"buffer_size": 456,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/game/Spawner.hx",
			"settings":
			{
				"buffer_size": 3707,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 30 files for \"game_is_started\" (case sensitive, whole word)\n\nE:\\Dev\\LD34\\src\\components\\PlayerBody.hx:\n  304:             Main.game_is_started = false;\n\nE:\\Dev\\LD34\\src\\Main.hx:\n   27:     public static var game_is_started:Bool = false;\n  144:         game_is_started = true;\n  238:         if(!game_is_started) return;\n  255:             game_is_started = false;\n\n5 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 400,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/components/PlayerBody.hx",
			"settings":
			{
				"buffer_size": 13017,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/components/PlayerRun.hx",
			"settings":
			{
				"buffer_size": 2987,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/physics/ContactSolver.hx",
			"settings":
			{
				"buffer_size": 4463,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/entities/Actor.hx",
			"settings":
			{
				"buffer_size": 656,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/physics/Space.hx",
			"settings":
			{
				"buffer_size": 2215,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 221.0,
		"last_filter": "rem",
		"selected_items":
		[
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"upd",
				"Package Control: Upgrade Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"upda",
				"Package Control: Upgrade Package"
			],
			[
				"rese",
				"Haxe Completion: reset"
			],
			[
				"up",
				"Convert Case: Upper Case"
			],
			[
				"haxe",
				"Haxe Completion: reset"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"add",
				"Package Control: Add Repository"
			],
			[
				"addr",
				"Package Control: Add Repository"
			],
			[
				"Package Control: en",
				"Package Control: Enable Package"
			],
			[
				"Package Control: di",
				"Package Control: Disable Package"
			],
			[
				"Package Control: e",
				"Package Control: Enable Package"
			],
			[
				"Package Control: dis",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"Package Control: ena",
				"Package Control: Enable Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"",
				"About"
			],
			[
				"re",
				"Package Control: Remove Package"
			],
			[
				"packa",
				"Package Control: Enable Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: #!/usr/bin/env"
			],
			[
				"colo",
				"Color Picker"
			],
			[
				"Package Control: i",
				"Package Control: Install Package"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"remv",
				"Package Control: Remove Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"set synta",
				"Set Syntax: Lua (Love)"
			],
			[
				"Package Control Install Package",
				"Package Control: Install Package"
			]
		],
		"width": 528.0
	},
	"console":
	{
		"height": 701.0,
		"history":
		[
			"`",
			"where linter",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/Dev/LD34",
		"/E/Dev/LD34/assets",
		"/E/Dev/LD34/src",
		"/E/Dev/LD34/src/components",
		"/E/Dev/LD34/src/entities",
		"/E/Dev/LD34/src/game",
		"/E/Dev/LD34/src/physics",
		"/E/Dev/LD34/src/utils"
	],
	"file_history":
	[
		"/E/Dev/LD34/README.md",
		"/E/Dev/LD34/src/game/Spawner.hx",
		"/E/Dev/LD34/project.flow",
		"/E/Dev/LD34/bin/web/index.html",
		"/E/Dev/LD34/assets/parcel.json",
		"/E/Dev/LD34/src/entities/Player.hx",
		"/E/Dev/LD34/src/entities/Poop.hx",
		"/E/Dev/LD34/src/physics/Body.hx",
		"/E/Dev/LD34/src/physics/ContactSolver.hx",
		"/E/Dev/LD34/src/components/AntAI.hx",
		"/E/Dev/LD34/src/entities/Circle.hx",
		"/E/Dev/LD34/src/Physics.hx",
		"/E/Dev/JelloCE/ref/jelloBlob/utils/JelloVectorTools.hx",
		"/E/Dev/LD34/src/utils/Mathf.hx",
		"/E/Dev/LD34/src/components/Collider.hx",
		"/E/Dev/LD34/src/components/PlayerRun.hx",
		"/E/Dev/JelloCE/ref/jello/JelloVectorTools.hx",
		"/E/Dev/LD34/src/entities/Ant.hx",
		"/E/Dev/LD34/src/physics/SpatialHash.hx",
		"/E/Dev/LD34/src/utils/Fps.hx",
		"/E/Dev/LD34/src/components/EnemyCollider.hx",
		"/E/Dev/LD34/src/components/AntRun.hx",
		"/E/Dev/LD34/src/components/PlayerBody.hx",
		"/E/Dev/LD34/src/entities/Actor.hx",
		"/E/Dev/pirateGame/src/physics/shapes/Shape.hx",
		"/E/Dev/LD34/src/components/PlayerCollider.hx",
		"/E/Dev/LD34/src/components/AntInput.hx",
		"/E/Dev/LD34/src/components/PlayerInput - копия.hx",
		"/E/Dev/LD34/src/components/PlayerInput.hx",
		"/E/Dev/LD34/src/physics/Space.hx",
		"/E/Dev/pirateGame/src/components/player/PlayerSettings.hx",
		"/E/Dev/pirateGame/src/components/player/Run.hx",
		"/E/Dev/pirateGame/src/components/player/Customize.hx",
		"/E/GitHub/luxe/phoenix/geometry/Geometry.hx",
		"/E/Dev/JelloCE/ref/port/src/jellohx/SpringBody.hx",
		"/E/Dev/JelloCE/ref/port/src/jellohx/VectorTools.hx",
		"/E/Dev/JelloCE/ref/jello/JelloSpringBody.hx",
		"/E/Dev/LD34/src/utils/Constants.hx",
		"/E/Dev/pirateGame/src/components/weapon/Weapons.hx",
		"/E/Dev/LD34/src/components/PlayerHeadCollider.hx",
		"/E/Dev/pirateGame/src/entities/Missle.hx",
		"/E/Dev/pirateGame/src/game/MapManager.hx",
		"/E/Dev/pirateGame/src/entities/Player.hx",
		"/E/Dev/LD34/src/utils/Bits.hx",
		"/E/Dev/pirateGame/src/game/Constants.hx",
		"/E/Dev/pirateGame/src/game/Bits.hx",
		"/E/Dev/LD34/src/physics/SCDL.hx",
		"/E/Dev/LD34/src/physics/Contact.hx",
		"/E/Dev/LD34/src/utils/DebugDrawer.hx",
		"/E/Dev/JelloCE/ref/port/src/Main.hx",
		"/E/Dev/JelloCE/ref/JelloHx_origin/src/com/gamestudiohx/jellohx/SpringBody.hx",
		"/E/Dev/JelloCE/ref/JelloHx_origin/src/com/gamestudiohx/jellohx/VectorTools.hx",
		"/E/Dev/pirateGame/src/Main.hx",
		"/E/Dev/pirateGame/src/entities/Box.hx",
		"/E/Dev/pirateGame/src/components/physics/Collider.hx",
		"/E/Dev/pirateGame/src/components/physics/Body.hx",
		"/E/Dev/pirateGame/src/components/physics/CircleCollider.hx",
		"/E/Dev/pirateGame/src/physics/Contact.hx",
		"/E/Dev/LD34/src/physics/Collision.hx",
		"/E/Dev/pirateGame/src/physics/collision/SCDL.hx",
		"/E/Dev/pirateGame/src/physics/Collision.hx",
		"/E/Dev/pirateGame/src/physics/RigidBody.hx",
		"/E/Dev/LD34/src/physics/shapes/CircleShape.hx",
		"/E/Dev/LD34/src/physics/shapes/AABB.hx",
		"/E/Dev/pirateGame/src/physics/Behaviour.hx",
		"/E/Dev/LD34/src/components/collider.hx",
		"/E/Dev/pirateGame/src/physics/ContactSolver.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/B2World.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/B2Body.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/contacts/B2ContactEdge.hx",
		"/E/Dev/pirateGame/src/physics/ContactList.hx",
		"/E/Dev/pirateGame/src/physics/Space.hx",
		"/E/Dev/pirateGame/src/Physics.hx",
		"/E/Dev/pirateGame/Info/ref/Box2D_Lite/Body.cpp",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/contacts/B2Contact.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/B2ContactManager.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/contacts/B2ContactFactory.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/B2Island.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/common/math/B2Math.hx",
		"/E/Dev/pirateGame/src/physics/PhysicsMaterial.hx",
		"/E/Dev/pirateGame/Info/ref4/AAE---Axis-Aligned-Engine-master/aae.js",
		"/E/Dev/pirateGame/Info/ref/box2D/common/B2Settings.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/contacts/B2ContactSolver.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/collision/B2WorldManifold.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/collision/B2TimeOfImpact.hx",
		"/E/Dev/pirateGame/Info/ref/box2d-lite-js-master/src/main/arbiter.js",
		"/E/Dev/pirateGame/Info/ref/box2d-lite-js-master/src/main/world.js",
		"/E/Dev/pirateGame/Info/ref/box2d-lite-js-master/src/main/contact.js",
		"/E/Dev/pirateGame/Info/ref/box2d-lite-js-master/src/main/collide.js",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/joints/B2Joint.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/collision/B2ManifoldPoint.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/collision/B2Manifold.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/contacts/B2ContactConstraintPoint.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/common/math/B2Sweep.hx",
		"/E/Dev/pirateGame/src/physics/Sweep.hx",
		"/E/Dev/pirateGame/Info/ref/box2D/dynamics/contacts/B2PositionSolverManifold.hx",
		"/E/Dev/pirateGame/Info/ref/Box2D_Lite/World.cpp",
		"/E/Dev/pirateGame/Info/ref/Box2D_Lite/Arbiter.cpp",
		"/E/Dev/pirateGame/Info/ref/go-box2d-lite-master/box2dlite/world.go",
		"/E/Dev/pirateGame/Info/ref/go-box2d-lite-master/box2dlite/arbiter.go",
		"/E/Dev/pirateGame/Info/Olivier Renault/Polycolly/code/Tutorial 4 - Basic Arcade Collision response/source/Body.h",
		"/E/Dev/pirateGame/src/components/physics/PolygonCollider.hx",
		"/E/Dev/pirateGame/Info/Olivier Renault/Polycolly/code/Tutorial 4 - Basic Arcade Collision response/source/Body.cpp",
		"/E/Dev/pirateGame/Info/ref/SusliX Lite/src/main.cpp",
		"/E/Dev/pirateGame/Info/ref/SusliX Lite/src/Solver.h",
		"/E/Dev/pirateGame/Info/ref/SusliX Lite/src/Collider.h",
		"/E/Dev/pirateGame/Info/ref/SusliX Lite/src/PhysSystem.h",
		"/E/Dev/pirateGame/src/physics/shapes/BoxShape.hx",
		"/E/Dev/pirateGame/Info/Olivier Renault/Polycolly/code/Tutorial 4 - Basic Arcade Collision response/source/GameCode.cpp",
		"/E/Dev/pirateGame/Info/Olivier Renault/Polycolly/code/Tutorial 4 - Basic Arcade Collision response/source/main.cpp",
		"/E/Dev/pirateGame/Info/Olivier Renault/Polygon/code/Example 7 - Rigid body dynamics/source (no rotation)/Body.cpp",
		"/E/Dev/pirateGame/Info/Olivier Renault/Polygon/code/Example 7 - Rigid body dynamics/source (no rotation)/Collision.cpp",
		"/E/Dev/pirateGame/src/physics/CollisionFaces.hx",
		"/E/Dev/openSource/Quake-III-Arena-master/code/qcommon/cm_test.c",
		"/E/Dev/openSource/Quake-III-Arena-master/code/qcommon/cm_polylib.c",
		"/E/Dev/openSource/Quake-III-Arena-master/code/qcommon/cm_patch.c",
		"/E/Dev/pirateGame/src/components/physics/BoxCollider.hx",
		"/E/Dev/pirateGame/src/physics/RenderSettings.hx",
		"/E/GitHub/luxe/phoenix/Vector.hx",
		"/E/Dev/pirateGame/src/physics/CellObject.hx",
		"/E/Dev/pirateGame/src/physics/collision/Contact.hx",
		"/E/Dev/pirateGame/Info/Olivier Renault/PolyColly4/source/GameCode.cpp",
		"/E/Dev/pirateGame/Info/Olivier Renault/PolyColly4/source/main.cpp",
		"/E/Dev/JelloCE/ref/JelloHx_origin/src/com/gamestudiohx/jellohx/RenderingSettings.hx",
		"/E/Dev/JelloCE/ref/JelloHx_origin/src/com/gamestudiohx/jellohx/PointMass.hx",
		"/E/Dev/JelloCE/ref/JelloHx_origin/src/com/gamestudiohx/jellohx/Body.hx",
		"/E/Dev/JelloCE/ref/JelloHx_origin/src/com/gamestudiohx/jellohx/World.hx",
		"/E/Dev/pirateGame/Info/Olivier Renault/PolyColly3/source/main.cpp"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 91.0,
		"where_history":
		[
			"E:\\Dev\\LD34\\src\\",
			"E:\\Dev\\pirateGame\\Info\\ref\\box2D\\",
			"E:\\Dev\\pirateGame\\Info\\ref\\box2d-lite-js-master\\src\\main\\",
			"E:\\Dev\\pirateGame\\Info\\ref\\box2D\\",
			"E:\\Dev\\pirateGame\\Info\\ref\\box2D\\dynamics\\",
			"E:\\Dev\\pirateGame\\Info\\Olivier Renault\\Polycolly\\code\\Tutorial 4 - Basic Arcade Collision response\\source",
			"E:\\Dev\\JelloCE\\ref\\JelloHx_origin\\src\\com\\gamestudiohx\\jellohx\\",
			"E:\\Dev\\pirateGame\\Info\\Olivier Renault\\PolyColly4\\source",
			"E:\\Dev\\pirateGame\\Info\\Olivier Renault\\PolyColly3\\source\\",
			"E:\\Dev\\pirateGame\\Info\\ref\\box2D\\",
			"E:\\Dev\\pirateGame\\Info\\Box2D_old\\",
			"E:\\Dev\\pirateGame\\Info\\Olivier Renault\\Polygon\\code\\Example 7 - Rigid body dynamics\\source (no rotation)\\",
			"E:\\Dev\\pirateGame\\Info\\Olivier Renault\\PolyColly4\\source\\",
			"E:\\Dev\\pirateGame\\src\\physics\\",
			"E:\\Dev\\pirateGame\\Info\\ref\\box2D\\",
			"E:\\Dev\\pirateGame\\Info\\Box2D_old\\",
			"E:\\Dev\\pirateGame\\Info\\Box2D_old\\Dynamics\\",
			"E:\\Dev\\pirateGame\\Info\\ref\\box2D\\",
			"E:\\Dev\\pirateGame\\Info\\ref\\Box2D_v2.2.0\\Box2D\\Box2D",
			"E:\\Dev\\pirateGame\\Info\\ref\\Box2D_v2.2.0\\Box2D\\",
			"E:\\Dev\\pirateGame\\Info\\ref\\box2D\\",
			"E:\\Dev\\pirateGame\\Info\\ref\\box2D\\collision",
			"E:\\GitHub\\hx-lua\\project\\lua",
			"E:\\Dev\\pirateGame\\Info\\Olivier Renault\\",
			"E:\\Dev\\pirateGame\\Info\\Olivier Renault\\new",
			"E:\\Dev\\pirateGame\\Info\\Olivier Renault\\new\\collision_examples\\source",
			"E:\\Dev\\pirateGame\\Info\\Olivier Renault\\sweptsphere",
			"E:\\Dev\\pirateGame\\",
			"E:\\Dev\\pirateGame\\src\\",
			"E:\\Dev\\openSource\\DOOM-3-master",
			"E:\\Dev\\openSource\\Quake-III-Arena-master",
			"E:\\Dev\\pirateGame\\src\\",
			"E:\\Dev\\pirateGame\\src\\physics",
			"E:\\Dev\\pirateGame\\src\\",
			"E:\\Dev\\pirateGame\\ref\\box2D\\",
			"E:\\Dev\\pirateGame\\src\\",
			"E:\\Dev\\pirateGame\\ref\\nape\\",
			"E:\\Dev\\pirateGame\\ref\\box2D\\",
			"E:\\Dev\\pirateGame\\src\\",
			"C:\\Dev2\\pirateGame\\src\\physics\\",
			"C:\\GitHub\\luxe\\",
			"C:\\Dev2\\pirateGame\\src\\physics\\",
			"C:\\GitHub\\luxe\\phoenix\\",
			"C:\\Dev2\\pirateGame\\src\\physics\\",
			"C:\\Dev2\\pirateGame\\ref\\JumpFeel008\\Action",
			"C:\\Dev2\\pirateGame\\src\\",
			"C:\\Dev\\OpenSource\\teeworlds-master",
			"C:\\Dev\\OpenSource\\Quake-III-Arena-master",
			"C:\\Dev2\\pirateGame\\ref\\box2d-master\\box2D\\",
			"C:\\Dev2\\pirateGame\\ref\\SusliX Lite\\",
			"C:\\Dev2\\pirateGame\\ref\\SusliX Lite\\src\\",
			"C:\\Dev2\\pirateGame\\ref\\pl-b1ae55a4e91ab4fa183e89316b2b036095d5f214\\src\\box2d\\",
			"C:\\Dev\\OpenSource\\physics engines2\\physaxe-master\\phx",
			"C:\\Dev\\OpenSource\\physics engines2\\chipmunk-Go",
			"C:\\Dev\\OpenSource\\physics engines2\\physaxe-master\\phx",
			"C:\\Dev\\OpenSource\\physics engines2\\nape",
			"C:\\Dev\\OpenSource\\physics engines2\\matter-js-master\\src\\collision\\",
			"C:\\Dev\\OpenSource\\physics engines2\\PhysicsJS-master\\src",
			"C:\\Dev\\OpenSource\\physics engines2\\glaze-physics-as3-legacy-master",
			"C:\\Dev\\OpenSource\\physics engines2\\JPE-master\\src\\",
			"C:\\Dev\\OpenSource\\physics engines2\\JPE-master\\",
			"C:\\Dev\\OpenSource\\physics engines2\\box2dhx-master\\box2D\\dynamics\\",
			"C:\\Dev2\\pirateGame\\src\\physics\\",
			"C:\\Dev\\OpenSource\\physics engines2\\Box2D_Lite",
			"C:\\Dev\\OpenSource\\physics engines2\\matter-js-master2\\src",
			"C:\\Dev\\OpenSource\\physics engines2\\nape",
			"C:\\Dev\\Sublime\\Data\\sublime_haxe",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\scripts\\components",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\scripts\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\scripts\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\scripts\\components",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\scripts\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\scripts\\",
			"C:\\Dev\\hxlua\\assets\\scripts\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\scripts\\",
			"C:\\GitHub\\hx-lua\\project\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Cortex Command\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Cortex Command\\orks.rte.disabled\\",
			"C:\\Dev\\hxlua\\assets",
			"C:\\Dev\\hxlua\\src",
			"C:\\Dev\\hxlua\\assets\\",
			"C:\\Dev\\hxlua\\assets\\scripts\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Cortex Command\\uac.rte",
			"C:\\Dev\\hxlua\\ref\\rgaul-sel-32fd2e5fb108\\",
			"C:\\Dev\\hxlua\\assets\\scripts",
			"C:\\Dev\\hxlua\\assets\\",
			"C:\\GitHub\\luxe\\",
			"C:\\Dev\\hxlua\\src",
			"C:\\Dev\\hxlua\\assets\\",
			"C:\\Dev\\hxlua\\assets\\scripts",
			"C:\\Dev\\hxlua\\assets\\",
			"C:\\Dev\\hxlua\\src\\assets",
			"C:\\Dev\\hxlua\\src\\",
			"C:\\GitHub\\hx-lua\\",
			"C:\\Dev\\hxlua\\ref\\FEZ-master\\",
			"C:\\Dev\\hxlua\\ref\\FEZ-master\\src\\",
			"C:\\GitHub\\hx-lua\\",
			"C:\\GitHub\\hx-lua_bak\\",
			"C:\\GitHub\\hx-lua_bak\\project\\",
			"C:\\Dev\\hxlua\\src\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\scripts\\",
			"C:\\Dev\\hxlua\\ref\\FEZ-master\\",
			"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Don't Starve Together\\data\\scripts\\",
			"C:\\Dev\\hxlua\\ref\\FEZ-master\\",
			"C:\\Dev\\hxlua\\ref\\FEZ-master\\YakManExample\\",
			"C:\\Dev\\hxlua\\ref\\rgaul-sel-32fd2e5fb108\\",
			"C:\\GitHub\\luxe\\luxe\\",
			"C:\\Program Files (x86)\\Lua\\5.1",
			"C:\\Program Files (x86)\\Lua\\",
			"C:\\Program Files (x86)\\Lua\\5.1",
			"C:\\Program Files (x86)\\Lua\\5.2",
			"C:\\Users\\Andrei\\Desktop\\luarocks-2.2.2-win32\\",
			"C:\\Dev\\hxlua\\ref\\rgaul-sel-32fd2e5fb108",
			"C:\\GitHub\\hx-lua\\",
			"C:\\GitHub\\hx-lua\\project\\",
			"C:\\Dev\\hxlua\\ref\\rgaul-sel-32fd2e5fb108",
			"C:\\GitHub\\hx-lua\\project\\",
			"C:\\Dev\\hxlua\\ref\\rgaul-sel-32fd2e5fb108",
			"C:\\GitHub\\my\\luxe\\",
			"C:\\Dev\\LD33\\ref\\decompile\\JumpFeel008\\Action\\",
			"C:\\GitHub\\luxe\\luxe\\",
			"C:\\GitHub\\luxe\\luxe\\tween\\",
			"C:\\Dev\\LD33\\src\\",
			"C:\\Dev\\OpenSource\\physics engines\\box2d\\box2D\\",
			"C:\\Dev\\LD33\\src\\",
			"C:\\Dev\\OpenSource\\physics engines\\chipmunk-Go\\"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"playerPos",
			"game_is_started",
			"maxSpeedText",
			"distance",
			"distanceText",
			"tag",
			"fps",
			"bg",
			"Luxe.resources.texture",
			"texture",
			"circle.png",
			"angle",
			"aabbToGrid",
			"collisionGroup",
			"overlap",
			"entity",
			"Distance",
			"dista",
			"pInput",
			"debugMode",
			"collPairsText",
			"accel",
			"drop",
			"texture\ntexture",
			"texture",
			"PlayerCollider",
			"mShapeSpringK",
			"calculateSpringForceNum",
			"gravityScale",
			"deleted",
			"solveVelocity",
			"_circleoptions",
			"removeBody",
			"sphereVertexCollide",
			"aabb",
			"RigidBody",
			"Constants",
			"create_hud",
			"broadphase",
			"broad",
			"shouldCollide",
			"Shape",
			"_shape",
			"_sh",
			"gridIndex",
			"clampToGridVec",
			"isValidGridPos",
			"broadphase",
			"circle1",
			"contact.shape2.body",
			"shape2.body",
			"shape1.body",
			"Maths",
			"velocity",
			"contactsArray",
			"mtd",
			"Shape",
			"shape2",
			"shape1",
			"ContactList",
			"damping",
			"isStatic",
			"m_contactList",
			"B2ContactEdge",
			"m_contactList",
			"m_next",
			"m_prev",
			"m_next",
			"m_prev",
			"m_contactList",
			"prev",
			"m_contactList",
			"B2ContactEdge",
			".next",
			"next",
			"m_nodeA",
			"new B2ContactEdge",
			"B2ContactEdge",
			"m_contactList",
			"initialise",
			"tfirst",
			"tfirst < ",
			"solveVelocityCCD",
			"ccdTouched",
			"sweep",
			"isTouchedCCD",
			"initialise",
			"sweepEps",
			"initialise",
			"sweepEps",
			"Dthreshold",
			"correct3",
			"solveVelocityCCD",
			"initialise",
			"solveVelocityCCD",
			"initialise",
			"solveVelocity",
			"ccd",
			"initialise",
			"initialize",
			"update(",
			"timeOfImpact",
			"computeTOI",
			"solveTOI",
			"step",
			"solveVelocityCCD",
			"new",
			"find",
			"solveVelocity",
			"contactBaumgarte",
			"equalizedMass",
			"corPerc",
			"baumgarte",
			"equalizedMass",
			"maxLinearCorrection",
			"linearSlop",
			"isCollideDiscrete",
			"broadPhase",
			"pn",
			"c.pn",
			"update",
			"m_normalImpulse",
			"finalizeVelocityConstraints",
			"m_normalImpulse",
			"reset()",
			"reset",
			"m_normalImpulse",
			"reset"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"score",
			"aInput",
			"_options",
			"Body",
			"b",
			"bodyA",
			"bodyB",
			"bodyA",
			"Body",
			"bodyB",
			"bodyA",
			"ccdTouched",
			"shape2",
			"spherePos",
			"vertex",
			"hxl",
			"dxl",
			"h",
			"l",
			"displacement",
			"spherePos",
			"end",
			"start",
			"c2r",
			"c1r",
			"c1pos",
			"c2pos",
			"box",
			"b1half",
			"b2half",
			"b1pos",
			"b2pos",
			"box2max",
			"box2min",
			"box1max",
			"box1min",
			"vel",
			"b1",
			"b2",
			"box1.",
			"contact",
			"contact.velocity.",
			"contact.velocity",
			"contact.tlast",
			"contact.tfirst",
			"contact",
			"deltaY",
			"deltaX",
			"py",
			"px",
			"import physics.shapes.CircleShape;",
			"import physics.shapes.BoxShape;",
			"import physics.shapes.Shape;",
			"contact.position",
			"position",
			"velocity",
			"restitution",
			"overlap",
			"__overlap",
			"separation",
			"shape2",
			"shape1",
			"Math.abs",
			"mtd",
			"extent",
			"delta",
			"penetration = dy + radius",
			"penetration = dx + radius",
			"penetration = -l + radius",
			"penetration = l + radius",
			"penetration = -1.0",
			"penetration",
			"contact.normal",
			"contact.point",
			"normal",
			"point",
			"max.y",
			"max.x",
			"min.y",
			"min.x",
			"cPos.y",
			"cPos.x",
			"radius",
			"_circleoptions",
			".box.collisionFaces",
			"!data.shapeB.body.isStatic",
			"!data.shapeA.body.isStatic",
			".body.isStatic",
			"broadphase",
			"isSensor",
			"box",
			"shapeB",
			"shapeA",
			"shapeB",
			"shapeA",
			"shapeB",
			"shapeA",
			"shapeB",
			"shapeA",
			"shapeB",
			"shapeA",
			"box",
			"import physics.shape.BoxShape",
			"import physics.Shape",
			"import physics.RigidBody",
			"import physics.RigidBody;",
			"bodyB",
			"bodyA",
			"boxShape",
			"_sh",
			"_shape",
			"Shape",
			"bodyB",
			"bodyA",
			"bodyB",
			"bodyA",
			"contact",
			"frictionMultiplier",
			"jumpVelocity",
			"ApValueMass",
			"contact",
			"ContactSolver",
			"contactSolver",
			"ContactSolver",
			"--luaAssert(",
			"initialise",
			"LuaEntity",
			"TestComponent2"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Main.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8607,
						"regions":
						{
						},
						"selection":
						[
							[
								3252,
								3252
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1691.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/physics/SpatialHash.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6738,
						"regions":
						{
						},
						"selection":
						[
							[
								5555,
								5555
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3340.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "project.flow",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 456,
						"regions":
						{
						},
						"selection":
						[
							[
								60,
								60
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/sublime_flow/flow-file.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/game/Spawner.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3707,
						"regions":
						{
						},
						"selection":
						[
							[
								845,
								845
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 402.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 400,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										137,
										152
									],
									[
										217,
										232
									],
									[
										262,
										277
									],
									[
										305,
										320
									],
									[
										349,
										364
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								146,
								146
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"default_dir": "E:\\Dev\\LD34",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/components/PlayerBody.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13017,
						"regions":
						{
						},
						"selection":
						[
							[
								977,
								977
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 467.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/components/PlayerRun.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2987,
						"regions":
						{
						},
						"selection":
						[
							[
								2758,
								2758
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/physics/ContactSolver.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4463,
						"regions":
						{
						},
						"selection":
						[
							[
								3209,
								3209
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1844.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/entities/Actor.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 656,
						"regions":
						{
						},
						"selection":
						[
							[
								402,
								402
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/physics/Space.hx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2215,
						"regions":
						{
						},
						"selection":
						[
							[
								1629,
								1629
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/sublime_haxe/Haxe.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 586.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 379.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.haxe":
	{
		"height": 100.0
	},
	"pinned_build_system": "",
	"project": "ld34.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Dev\\goldenCalc\\goldenCalc.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Aib"
			]
		],
		"width": 392.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 250.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
